# -*- coding: utf-8 -*-
"""코딩테스트의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OBDTL_X6UFXemyFqIg1EKADxMaoVjuz9
"""

#const = 1
#const를 원소로 하는 리스트를 만드시오.


const=[1]
print(const,type(const))

li=[const]
print(li)

li2=list(const)
print(li2)

tu=(1,2,3,4)
#tu를 원소로 하는 리스트를 만들고, 리스트 길이를 구하시오.
#tu에 있는 원소를 원소로 하는 리스트를 만들고, 리스트 길이를 구하시오.
tu_list=[tu]
print(tu_list,len(tu_list))

tu_list2=list(tu)
print(tu_list2,len(tu_list2))

#[1,2,1,2,....]를 참고하여 1,2가 100번 나타나는 리스트를 만드시오.
a=[1,2]
print(a*100)

li=[1,2,3,4]
#li에 있는 원소를 줄 바꿈 없고 콤마(,) 없이 출력하시오(1 2 3 4 출력).



print(*[1,2,3,4])

#li=[1,2,3,4]
li=(1,2,3,4)
#하나 이상의 방법으로 li의 자료형을 출력하시오.
#하나 이상의 방법으로 li의 자료형이 리스트이면 True, 리스트가 아니면 False를 출력하시오.

print(type(li))

if type(li)==list:
  result=True
else:
  result=False

print(result)

isinstance(li,list)

li=[1,2,3,4]

#첫 번째 1의 인덱스를 출력하시오.
#li의 주소를 출력하시오.
li_index=li.index(1)
print(li_index)

print(id(li))

li=[1,2,1,4]

#li에 있는 유일한 값들을 출력하시오.
#li에 1이 있으면 True, 없으면 False를 출력하시오.
#li에 있는 1의 개수를 출력하시오.

li_set=set(li)
print(li_set)


if 1 in li:
  result=True
else:
 result=False
print(result)


print(li.count(1))

odl=[1,2,3,4,5,6,7,8]

#+인덱스를 이용하여 odl의 첫번째 원소를 출력하시오.
#+인덱스를 이용하여 odl의 마지막 원소를 출력하시오.
#-인덱스를 이용하여 odl의 마지막 원소를 출력하시오.
#odl의 길이를 이용하여 odl의 마지막 원소를 출력하시오.
#+인덱스를 이용하여 odl의 뒤에서 두번째 원소를 출력하시오.
#-인덱스를 이용하여 odl의 뒤에서 두번째 원소를 출력하시오.
#odl의 첫 번째 원소의 주소를 출력하시오.

print(odl[0])
print(odl[7])
print(odl[-1])
a=len(odl)-1
print(odl[a])
print(odl[6])
print(odl[-2])
print(id(odl[0]))

tu=(1,2,3,4)

#tu를 원소로 하는 리스트를 만들고, 리스트의 첫 번째 원소를 출력하시오.
#tu의 원소를 원소로 하는 리스트를 만들고, 리스트의 첫 번째 원소를 출력하시오.

li=[tu]
print(li[0])

li2=list(tu)
print(li2[0])

tdl=[[1,2,3,4],[5,6,7,8]]

#+인덱스를 이용하여 tdl의 첫 번째 원소를 출력하시오.
#+인덱스를 이용하여 tdl의 첫 번째 원소의 첫 번째 원소를 출력하시오.
#+인덱스를 이용하여 tdl의 첫 번째 원소의 마지막 원소를 출력하시오.
#-인덱스를 이용하여 tdl의 첫 번째 원소의 마지막 원소를 출력하시오.
#tdl의 첫 번째 원소의 길이를 이용하여 tdl의 첫 번째 원소의 마지막 원소를 출력하시오.
#+인덱스를 이용하여 tdl의 첫 번째 원소의 뒤에서 두 번째 원소를 출력하시오.
#-인덱스를 이용하여 tdl의 첫 번째 원소의 뒤에서 두 번째 원소를 출력하시오.

print(tdl[0])
print(tdl[0][0])
print(tdl[0][3])
print(tdl[-2][-1])
a=len(tdl[0])-1
print(tdl[0][a])
print(tdl[0][-2])
print(tdl[-2][-2])

odl=[1,2,3,4,5,6,7,8]

#0이 있는 +슬라이싱을 이용하여 odl의 [1,2,3,4]를 출력하시오.
#0이 없는 +슬라이싱을 이용하여 odl의 [1,2,3,4]를 출력하시오.
#+슬라이싱을 이용하여 odl의 [3,4,5,6]을 출력하시오.
#+슬라이싱을 이용하여 odl의 [5,6,7,8]을 출력하시오.
#-슬라이싱을 이용하여 odl의 [5,6,7]을 출력하시오.
#-슬라이싱을 이용하여 odl의 [5,6,7,8]을 출력하시오.

print(odl[0:4])
print(odl[:4])
print(odl[2:6])
print(odl[4:])
print(odl[-4:-1])
print(odl[-4:])

odl=[[1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16]]

#+인덱스와 +슬라이싱을 이용하여 [1,2,3,4]를 출력하시오.
#+인덱스와 +슬라이싱을 이용하여 [3,4,5,6]을 출력하시오.
#+인덱스와 +슬라이싱을 이용하여 [5,6,7,8]을 출력하시오.
#+인덱스와 -슬라이싱을 이용하여 [5,6,7]을 출력하시오.
#+인덱스와 -슬라이싱을 이용하여 [5,6,7,8]을 출력하시오.

print(odl[0][0:4])
print(odl[0][2:6])
print(odl[0][4:])
print(odl[0][-4:-1])
print(odl[0][-4:])

li=[]

#1) li에 2를 append하시오.
#2) 1)의 결과에 3을 append하시오.
#3) 2)의 결과에 4를 append하시오.
#4) 3)의 결과의 첫 번째 원소로 1을 insert하시오.
#5) 4)의 결과에 [5,6]을 extend하시오.
#6) 5)의 결과에 [7,8]을 + 하시오.

li.append(2)
print(li)

li.append(3)
print(li)

li.append(4)
print(li)

li.insert(0,1)
print(li)

li.extend([5,6])
print(li)

li=li+[7,8]
print(li)

li=[1,2,13,4,15,16,17,8]

#1) li에서 인덱스 2에 있는 값이 3이 되도록 하시오.
#2) 1)의 결과에서 인덱스 4~ 인덱스 6에 있는 값이 5,6,7이 되도록 하시오.

li.insert(2,3)
print(li)

i=[4,5,6]
for j in i:
  li.insert(j,j+1)
print(li)

li=[1,2,13,4,15,16,17,8]

li[2]=3
print(li)

li[4:7]=5,6,7
print(li)

li=[0,1,2,1,2,3,4,5,6,7,8,9,10]

# 1) li의 첫 번째 원소를 del하시오.
# 2) 1)의 결과에서 인덱스 2~ 인덱스 3에 있는 값을 del하시오.
# 3) 2)의 결과에서 맨 마지막 값을 출력하고 제거하시오.
# 4) 3)의 결과에서 값 9를 remove하시오.
# 5) 4)의 결과 리스트를 clear하시오.

del li[0]
print(li)

del li[2:4]
print(li)

print(li.pop(-1),end=",");print(li)

li.remove(9)
print(li)

li.clear()
print(li)

li=[1,None,3,4]

#다음 각각의 방법으로 li를 뒤집으시오.
#다음:reverse,reversed,알고 있는 다른방법

li.reverse()
print(li)

li_2=list(reversed(li))
print(li_2)

li_3=li_2[::-1]
print(li_3)

li=[2,4,3,1]

#sort, sorted를 이용하여 li를 정령하시오.
#li를 내림차순으로 정령하시오.

li.sort()
print(li)

li2 = sorted(li)
print(li2)

li_2=sorted(li,reverse=True)
print(li_2)

li3=[2,4,3,1]
li3.sort(reverse=True)
print(li3)

li2 = [2, 4, None, 3, 1]
li2.reverse()
print(li2)

li = [2, 4, None, 3, 1]
li.sort()
print(li)

"""다음을 컴프리헨션을 쓰지 않는 for와 컴프리헨션을 쓰는 for 각각으로 코딩하시오."""

tdl=[[1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16]]

# +인덱스를 이용하여 tdl 각 행의 첫번째 원소를 출력하시오.
# -인덱스를 이용하여 tdl 각 행의 마지막 원소를 출력하시오.
# tdl 각 행의 길이를 이용하여 tdl 각 행의 마지막 원소를 출력하시오.
# -인덱스를 이용하여 tdl 각 행의 뒤에서 두 번째 원소를 출력하시오.

# +슬라이싱을 이용하여 [[1,2,3,4],[9,10,11,12]]을 출력하시오.
# +슬라이싱을 이용하여 [[3,4,5,6],[11,12,13,14]]을 출력하시오.
# +슬라이싱을 이용하여 [[5,6,7,8],[13,14,15,16]]을 출력하시오.

print(tdl[0][0],end=",");print(tdl[1][0])

for row in tdl:
  print(row[0])

[print(row[0]) for row in tdl]

print(tdl[-2][-1],end=",");print(tdl[-1][-1])

for row in tdl:
  print(row[-1])

a=len(tdl[0])-1
b=len(tdl[1])-1
print(tdl[0][a],end=",");print(tdl[1][b])

[print(row[len(row)-1]) for row in tdl]

print(tdl[-2][-2],end=",");print(tdl[-1][-2])

print(tdl[0][0:4],end=",");print(tdl[1][0:4])

print(tdl[0][2:6],end=",");print(tdl[1][2:6])

print(tdl[0][4:],end=",");print(tdl[1][4:])

li=[]

# li에 1~8을 append하시오(range 이용).

for i in range(1,9):
  li.append(i)
print(li)

li2=[x for x in range(1,9)]
print(li2)

tdl=[[1,2,3,4],[5,6,7,8]]

# zip, *를 이용하여 tdl을 전치하시오.
# zip, *를 이용하여 tdl을 전치하되, 결과의 원소가 리스트가 되도록 하시오.

for tu in zip(tdl[0],tdl[1]):
  print(tu)

for element in zip(*tdl):
  print(element)

for li in zip(tdl[0],tdl[1]):
  print(list(li))

tdl_new = []
for element in zip(*tdl):
  tdl_new.append(element)
print(tdl_new)

tdl_new = []
[tdl_new.append(element) for element in zip(*tdl)]
print(tdl_new)

print([list(li_2) for li_2 in zip(*tdl)])

print(dict(zip(*tdl)))

tdl_new = [element for element in zip(*tdl)]
print(tdl_new)

li=[1,2,None,4]

# li에서 None를 제거하시오.
# li에서 None은 None으로, None이 아닌 값은 문자열로 바꾸시오.

for x in li:
   if x==None:
     li.remove(x)    
print(li)

li=str(li)
print(li)
print(type(li[:]))

li = [1, 2, None, 4]
print('67-2. li에서 None은 None으로, None이 아닌 값은 문자열로 바꾸시오.')
print([str(li[index]) if type(li[index]) == int else li[index] for index in range(len(li))])
print(li)

li=[1,2,None,4]
[li.remove(row) for row in li if row == None]
print(li)
print(len(li))
li2=[1,2,None,4]
for index in range(len(li2)):
  if type(li2[index]) == int:
    li2[index] = str(li2[index])
print(li2)

"""컴프리헨션 끝"""



li=[[[1,2],[3,4]], [[5,6],7,8],[9,10,11,12]]

# li의 원소에 대해, 원소의 원소가 모두 리스트이면 'all', 일부는 리스트이고 일부는 리스트가 아니면 'any', 모두가 리스트가 아니면 'val'을 출력하는 함수를 만드시오.


def list_function(li):
  for element in li:
      if all(type(row) == list for row in element) == True: print('all')
      elif any(type(row) == list for row in element) == True: print('any')
      else: print('var')

list_function(li)

li=[[[1,2],[3,4]], [[5,6],7,8],[9,10,11,12]]

for i in li:
  if all(type(j)==list for j in i)==True:
      print('all')
  elif any(type(j)==list for j in i)==True:
      print('any')
  else:
      print('val')

li=[[[1,2],[3,4]], [[5,6],7,8],[9,10,11,12]]

for i in li:
  for j in i:
    if all(type(j)==list)==True:
      print('all')
    elif any(type(j)==list)==True:
      print('any')
    else:
      print('val')

# 다음 각각을 수행하는 함수를 만드시오.
#import 사용가능
li=[0,1,2,3]
# 1-1) li에 있는 값들을 datetime으로 변환하는 함수
# 1-2) 1-1)의 결과를 타임스탬프로 변환하는 함수
# 2-1) 1-1)의 결과를 문자열로 변환하는 함수
# 2-2) 2-1)의 결과를 datetime으로 변환하는 함수
# 3-1) li에 있는 값들을 datetime으로 변환하고 그 결과를 문자열로 변환하는 함수
# 3-2) 3-1)의 결과를 datetime을 변환하고, 그 결과를 타임스탬프로 변환하는 함수

import datetime
import time
ts = [0,1,2,3]
print('1-1 ts에 있는 값들을 datetime으로 변환하는 함수')
def ts_to_dt(ts):
  dt_li  = [datetime.datetime.fromtimestamp(ts_row)for ts_row in ts]
  return dt_li
print(ts_to_dt(ts))
dt_li = ts_to_dt(ts)
print('1-2) 1-1)의 결과를 타임스탬프로 변환하는 함수')
# datetime.datetime.timestamp()는 리스트안에 있는 수로는 버그 일어남.
def dt_ts(dt):
  ts_li = [time.mktime(dt_row.timetuple()) for dt_row in dt]
  return ts_li
print(dt_ts(dt_li))

print('2-1) 1-1)의 결과를 문자열로 변환하는 함수')
def dt_to_str(dt):
  str_li = [dt_row.strftime('%Y-%m-%d %H:%M:%S') for dt_row in dt]
  return str_li
print(dt_to_str(dt_li))

st = dt_to_str(dt_li)
print('2-2) 2-1)의 결과를 datetime으로 변환하는 함수')
def str_to_dt(st):
  dt_li = [datetime.datetime.strptime(st_row, '%Y-%m-%d %H:%M:%S') for st_row in st]
  return dt_li
print(str_to_dt(st))

print('3-1) dt에 있는 값들을 datetime으로 변환하고 그 결과를 문자열로 변환하는 함수')
def ts_dt_str(ts):
  dt_li  = [datetime.datetime.fromtimestamp(ts_row)for ts_row in ts]
  str_li = [dt_row.strftime('%Y-%m-%d %H:%M:%S') for dt_row in dt_li]
  return str_li
print(ts_dt_str(ts))

str_li = ts_dt_str(ts)
print('3-2) 3-1)의 결과를 datetime을 변환하고, 그 결과를 타임스탬프로 변환하는 함수')
def str_dt_ts(str_li):
  dt_li = [datetime.datetime.strptime(st_row, '%Y-%m-%d %H:%M:%S') for st_row in str_li]
  ts_li = [time.mktime(dt_row.timetuple()) for dt_row in dt_li]
  return ts_li
print(str_dt_ts(str_li))

import datetime
import time
ts = [0,1,2,3]


def ts_to_dt(ts):
  dt_li  = [datetime.datetime.fromtimestamp(ts_row)for ts_row in ts]
  return dt_li
print(ts_to_dt(ts))

dt_li = ts_to_dt(ts)
def dt_ts(dt):
  ts_li = [time.mktime(dt_row.timetuple()) for dt_row in dt]
  return ts_li
print(dt_ts(dt_li))  

def dt_to_str(dt):
  str_li = [dt_row.strftime('%Y-%m-%d %H:%M:%S') for dt_row in dt]
  return str_li
print(dt_to_str(dt_li))


st = dt_to_str(dt_li)
def str_to_dt(st):
  dt_li = [datetime.datetime.strptime(st_row, '%Y-%m-%d %H:%M:%S') for st_row in st]
  return dt_li
print(str_to_dt(st))

def ts_dt_str(ts):
  dt_li  = [datetime.datetime.fromtimestamp(ts_row)for ts_row in ts]
  str_li = [dt_row.strftime('%Y-%m-%d %H:%M:%S') for dt_row in dt_li]
  return str_li
print(ts_dt_str(ts))

import datetime
import time
ts = [0,1,2,3]
print('1-1 ts에 있는 값들을 datetime으로 변환하는 함수')
def ts_to_dt(ts):
  dt_li  = [datetime.datetime.fromtimestamp(ts_row)for ts_row in ts]
  return dt_li
print(ts_to_dt(ts))

dt_li = ts_to_dt(ts)
print('1-2) 1-1)의 결과를 타임스탬프로 변환하는 함수')
# datetime.datetime.timestamp()는 리스트안에 있는 수로는 버그 일어남.
def dt_ts(dt):
  ts_li = [time.mktime(dt_row.timetuple()) for dt_row in dt]
  return ts_li
print(dt_ts(dt_li))

print('2-1) 1-1)의 결과를 문자열로 변환하는 함수')
def dt_to_str(dt):
  str_li = [dt_row.strftime('%Y-%m-%d %H:%M:%S') for dt_row in dt]
  return str_li
print(dt_to_str(dt_li))

st = dt_to_str(dt_li)
print('2-2) 2-1)의 결과를 datetime으로 변환하는 함수')
def str_to_dt(st):
  dt_li = [datetime.datetime.strptime(st_row, '%Y-%m-%d %H:%M:%S') for st_row in st]
  return dt_li
print(str_to_dt(st))

print('3-1) ts에 있는 값들을 datetime으로 변환하고 그 결과를 문자열로 변환하는 함수')
def ts_dt_str(ts):
  dt_li  = [datetime.datetime.fromtimestamp(ts_row)for ts_row in ts]
  str_li = [dt_row.strftime('%Y-%m-%d %H:%M:%S') for dt_row in dt_li]
  return str_li
print(ts_dt_str(ts))

str_li = ts_dt_str(ts)
print('3-2) 3-1)의 결과를 datetime을 변환하고, 그 결과를 타임스탬프로 변환하는 함수')
def str_dt_ts(str_li):
  dt_li = [datetime.datetime.strptime(st_row, '%Y-%m-%d %H:%M:%S') for st_row in str_li]
  ts_li = [time.mktime(dt_row.timetuple()) for dt_row in dt_li]
  return ts_li
print(str_dt_ts(str_li))



# 다음 각각을 수행하는 함수를 만드시오.
li=[1,2,3,4,5,6,7,8]
# 1) li의 평균(mean)
# 2) li의 범위(range)
# 3) li의 표준편차(standard deviation)
# 4) li의 변동계수(cv)
# 5) li의 mad(mean absolute deviation)
# 6) li의 첨도(kurtosis)

import numpy
mean=numpy.mean(li)
print(mean)

print(min(li),end="~");print(max(li))

std=numpy.std(li)
print(std)

cv=std/mean
print(cv)

mad=numpy.median(numpy.absolute(li - numpy.median(li, axis=0)), axis=0)
print(mad)

from scipy.stats import kurtosis
print(kurtosis(li))

# 다음 각각을 수행하는 함수를 만드시오.
li=[1,2,3,4,5,6,7,8]
# 1) li의 평균(mean)
# 2) li의 범위(range)
# 3) li의 표준편차(standard deviation)
# 4) li의 변동계수(cv)
# 5) li의 mad(mean absolute deviation)
# 6) li의 첨도(kurtosis)

li = [1, 2, 3, 4, 5, 6, 7, 8]
def _mean_(li):
  result = sum(li) / len(li)
  return result
print(_mean_(li))

def _range_(li):
  li_range = [min(li),max(li)]
  return li_range
print(_range_(li))

def _std_(li):
  # 평균
  li_mean = _mean_(li)
  # 편차(데이터 - 평균) 제곱 합
  de = 0
  for row in li:
    de += (row - li_mean) ** 2
  # 분산 편차 제곱 합 / 데이터 개수
  li_var = de / len(li)
  # 표준편차 분산 제곱근
  li_std = li_var ** 0.5
  return li_std
print(_std_(li))

def _cv_(li):
  li_std, li_mean = _std_(li), _mean_(li)
  li_cv = li_std / li_mean
  return li_cv
print(_cv_(li))

def _aad_(li):
  li_mean = _mean_(li)
  result = 0
  for row in li:
    result += abs(row - li_mean)
  result = result / len(li)
  return result

#  첨도 (∑(Xi - x)4 / {∑(Xi-x)2}2) - 3

def _kurtosis(li):
  result = 0
  li_mean = _mean_(li)
  li_std = _std_(li)
  for row in li:
    result += ((row - li_mean) / li_std) **4
  result = (result / len(li)) -3
  return result
print(_kurtosis(li))

a=2.29128784747792**2
print(a)

# 다음 조건을 만족하는 Sort 클래스를 만드시오.
# 1. Sort([2,4,3,1]).ascending()을 하면 [1,2,3,4]출력
# 2. Sort([2,None,3,1]).ascending()을 하면 [None,1,2,3] 출력
# 3. Sort([2,4,3,1]).descending()을 하면 [4,3,2,1] 출력
# 4. Sort([2,None,3,1]).descending()을 하면 [3,2,1,None]

class Sort:
  def __init__(self,li):
    self.li = li
  def ascending(self):
    for i in self.li:
      if i== None:
        self.li.remove(None)
        self.li.sort()
        self.li=[None]+self.li
        return print(self.li)
    return print(sorted(self.li))

  def descending(self):
    for i in self.li:
      if i== None:
        self.li.remove(None)
        self.li.sort(reverse=True)
        self.li=self.li+[None]
        return print(self.li)
    self.li=sorted(self.li)
    return print(self.li[::-1])
    
Sort([2,4,3,1]).ascending()
Sort([2,None,3,1]).ascending()
Sort([2,4,3,1]).descending()
Sort([2,None,3,1]).descending()

# 다음 조건을 만족하는 Sort 클래스를 만드시오.
# 1. Sort([2,4,3,1]).ascending()을 하면 [1,2,3,4]출력
# 2. Sort([2,None,3,1]).ascending()을 하면 [None,1,2,3] 출력
# 3. Sort([2,4,3,1]).descending()을 하면 [4,3,2,1] 출력
# 4. Sort([2,None,3,1]).descending()을 하면 [3,2,1,None]


class Sort:
  def __init__(self,li):
    self.li = li
  # None를 맨 앞이나 뒤로 보내고 뒤집자
  def ascending(self):
    cnt = self.li.count(None)
    for index in range(cnt):
      self.li.remove(None)
    self.li.sort()
    #None_li = [None for _ in range(cnt)]
    #self.li = None_li + self.li
    self.li = [None]*cnt + self.li
    return print(self.li)
  def descending(self):
    None_cnt = self.li.count(None)
    for x in range(None_cnt):
      self.li.remove(None)
    self.li.sort(reverse=True)
    None_li = [None for _ in range(None_cnt)]
    self.li = self.li + None_li
    return print(self.li)
    
Sort([2,3,1,4]).ascending()
Sort([2,None,3,1]).ascending()
Sort([2,4,3,1]).descending()
Sort([2,None,3,1]).descending()

# 다음 조건을 만족하는 Transpose_xdl2Tdl 클래스를 만드시오.
# print(Transpose_xdl2Tdl([1,2,3,4]).result)하면 [[1],[2],[3],[4]] 출력.
# print(Transpose_xdl2Tdl([[1,2,3,4],[5,6,7,8]]).result)하면 [[1,5],[2,6],[3,7],[4,8]] 출력.

class Transpose_xdl2Tdl:
   result = []
   def __init__(self,li):
    if type(li[0]) == list:
      self.result = [list(i) for i in zip(*li)]
    else:
      self.result = [[i] for i in li]
      
print(Transpose_xdl2Tdl([1, 2, 3, 4]).result)
print(Transpose_xdl2Tdl([[1,2,3,4],[5, 6, 7, 8]]).result)

# 다음 조건을 만족하는 재귀함수가 있는 Merge_tdl 클래스를 만드시오.
odl_01=[1,2,3,4]
odl_02=[5,6,7,8]
tdl_01=[[row] for row in odl_01]  #[[1],[2],[3],[4]]
tdl_02=[[row] for row in odl_02]
# print(Merge_tdl(tdl_01, tdl_02).res)하면 [[1,5],[2,6],[3,7],[4,8]] 출력.

class Merge_tdl:
  res = []
  def __init__(self,*tdl):
    # tdl 길이가 같다는 기준을 주고 코딩
    self.tdl_len = len(tdl[0])
    self.tdl_1 = tdl[0]
    self.tdl_2 = tdl[1]
    self.res = []
    return Merge_tdl.Merge(self)
  def Merge(self):
      if self.tdl_len == 0:
        self.res = self.res[::-1]
        return print(self.res)
      else:
        self.tdl_len -= 1
        self.res.append(self.tdl_1[self.tdl_len] + self.tdl_2[self.tdl_len])
        print(self.tdl_len, self.res)
        return Merge_tdl.Merge(self)


odl_01 = [1, 2, 3, 4]
odl_02 = [5, 6, 7, 8]
tdl_01 = [[row] for row in odl_01]
tdl_02 = [[row] for row in odl_02]
print(tdl_01,tdl_02)
Merge_tdl(tdl_01,tdl_02).res


tdl_01 = [[1, 2], [3, 4]]
tdl_02 = [[5, 6], [7, 8]]
Merge_tdl(tdl_01,tdl_02).res
print('')

# 다음 조건을 만족하는 재귀함수가 있는 Merge_tdl 클래스를 만드시오.
odl_01=[1,2,3,4]
odl_02=[5,6,7,8]
tdl_01=[[row] for row in odl_01]  #[[1],[2],[3],[4]]
tdl_02=[[row] for row in odl_02]
# print(Merge_tdl(tdl_01, tdl_02).res)하면 [[1,5],[2,6],[3,7],[4,8]] 출력.

class Merge_tdl:
  res = []
  def __init__(self,*tdl):
    self.tdl_len = len(tdl[0])
    self.tdl_1 = tdl[0]
    self.tdl_2 = tdl[1]
    self.res = []
    return Merge_tdl.Merge(self)
  def Merge(self):
      if self.tdl_len == 0:
        
        self.res = self.res[::-1]
        return print(self.res)
      else:
        self.tdl_len -= 1
        self.res.append(self.tdl_1[self.tdl_len] + self.tdl_2[self.tdl_len])
        return Merge_tdl.Merge(self)


odl_01 = [1, 2, 3, 4]
odl_02 = [5, 6, 7, 8]
tdl_01 = [[row] for row in odl_01]
tdl_02 = [[row] for row in odl_02]
print(tdl_01,tdl_02)
Merge_tdl(tdl_01,tdl_02).res


tdl_01 = [[1, 2], [3, 4]]
tdl_02 = [[5, 6], [7, 8]]
Merge_tdl(tdl_01,tdl_02).res

# 다음 조건을 만족하는 재귀함수가 있는 Merge_tdl 클래스를 만드시오.
odl_01=[1,2,3,4]
odl_02=[5,6,7,8]
tdl_01=[[row] for row in odl_01]  #[[1],[2],[3],[4]]
tdl_02=[[row] for row in odl_02]
# print(Merge_tdl(tdl_01, tdl_02).res)하면 [[1,5],[2,6],[3,7],[4,8]] 출력.

class Merge_tdl:
  res = []
  def __init__(self,*tdl):
    self.tdl_len = len(tdl[0])
    self.tdl_1 = tdl[0]
    self.tdl_2 = tdl[1]
    self.res = []
    return Merge_tdl.Merge(self)
    
  def Merge(self):
      if self.tdl_len != 0:
        self.tdl_len -= 1
        self.res.append(self.tdl_1[self.tdl_len] + self.tdl_2[self.tdl_len])
        return Merge_tdl.Merge(self)

      else:
        self.res = self.res[::-1]
        return print(self.res)


odl_01 = [1, 2, 3, 4]
odl_02 = [5, 6, 7, 8]
tdl_01 = [[row] for row in odl_01]
tdl_02 = [[row] for row in odl_02]
print(tdl_01,tdl_02)
Merge_tdl(tdl_01,tdl_02).res


tdl_01 = [[1, 2], [3, 4]]
tdl_02 = [[5, 6], [7, 8]]
Merge_tdl(tdl_01,tdl_02).res

odl_01=[[1,2],[3,4]]
odl_02=[[5,6],[7,8]]
# print(Merge_tdl(tdl_01, tdl_02).result)하면 [[1,2,5,6],[3,4,7,8]] 출력.

#참고:
odl_01 = [1, 2, 3, 4]
odl_02 = [5, 6, 7, 8]
tdl_01 = [[row] for row in odl_01]
tdl_02 = [[row] for row in odl_02]
#tdl_01 + tdl_02                            [[1,2],[3,4],[5,6],[7,8]]
#tdl_01.append(tdl_02)                      [[1,2],[3,4],[[5,6],[7,8]]]
#[tdl_01.append(row) for row in tdl_02]     [[1,2],[3,4],[5,6],[7,8]]
#tdl_01.extend(tdl_02)                      [[1,2],[3,4],[5,6],[7,8]]
#tdl_01.insert(2,tdl_02)                    [[1,2],[3,4],[[5,6],[7,8]]]

a=tdl_01 + tdl_02                           
#b=tdl_01.append(tdl_02)                     
#c=[tdl_01.append(row) for row in tdl_02]    
#d=tdl_01.extend(tdl_02)                      
#e=tdl_01.insert(2,tdl_02)                   
print(a)
print(b)
print(c)
print(d)
print(e)

with open('../data.csv', 'w') as f:
    for key in key_list:
        
        f.write('%s'%key)
        
    f.write('\n') 
    for x in range(max_len):
        for key in key_list:
            f.write('%s'%raw[key][x])
        f.write('\n')

a=5.1%1
print(a)